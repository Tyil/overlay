diff --git a/src/strings/ops.c b/src/strings/ops.c
index 2c6eaa94..38ad8251 100644
--- a/src/strings/ops.c
+++ b/src/strings/ops.c
@@ -634,7 +634,10 @@ MVMint64 MVM_string_equal_at(MVMThreadContext *tc, MVMString *a, MVMString *b, M
         return 0;
     return MVM_string_substrings_equal_nocheck(tc, a, offset, bgraphs, b, 0);
 }
-MVM_STATIC_INLINE MVMint32 string_equal_at_ignore_case_INTERNAL_loop(MVMThreadContext *tc, MVMString *haystack, MVMString *needle_fc, MVMint64 h_start, MVMint64 h_graphs, MVMint64 n_graphs) {
+/* Ensure return value can hold numbers at least 3x higher than MVMStringIndex.
+ * Theoretically if the string has all ï¬ƒ ligatures and 1/3 the max size of
+ * MVMStringIndex in length, we could have some weird results. */
+MVM_STATIC_INLINE MVMint64 string_equal_at_ignore_case_INTERNAL_loop(MVMThreadContext *tc, MVMString *haystack, MVMString *needle_fc, MVMint64 h_start, MVMint64 h_graphs, MVMint64 n_fc_graphs) {
     MVMuint32 h_fc_cps;
     /* An additional needle offset which is used only when codepoints expand
      * when casefolded. The offset is the number of additional codepoints that
@@ -642,7 +645,7 @@ MVM_STATIC_INLINE MVMint32 string_equal_at_ignore_case_INTERNAL_loop(MVMThreadCo
     MVMint64 n_offset = 0;
     MVMint64 i, j;
     MVMGrapheme32 h_g, n_g;
-    for (i = 0; i + h_start < h_graphs && i + n_offset < n_graphs; i++) {
+    for (i = 0; i + h_start < h_graphs && i + n_offset < n_fc_graphs; i++) {
         const MVMCodepoint* h_result_cps;
         h_g = MVM_string_get_grapheme_at_nocheck(tc, haystack, h_start + i);
         if (h_g >= 0 ) {
@@ -657,20 +660,26 @@ MVM_STATIC_INLINE MVMint32 string_equal_at_ignore_case_INTERNAL_loop(MVMThreadCo
         if (h_fc_cps == 0) {
             n_g = MVM_string_get_grapheme_at_nocheck(tc, needle_fc, i + n_offset);
             if (h_g != n_g)
-                return 0;
+                return -1;
         }
         else if (h_fc_cps >= 1) {
             for (j = 0; j < h_fc_cps; j++) {
                 n_g = MVM_string_get_grapheme_at_nocheck(tc, needle_fc, i + n_offset);
                 h_g = h_result_cps[j];
                 if (h_g != n_g)
-                    return 0;
+                    return -1;
                 n_offset++;
             }
             n_offset--;
         }
     }
-    return 1;
+    return n_offset;
+    /* We return -1 if the strings are not equal and 0 or more if they are equal
+     * The return values from 0, 1 etc designate how many haystack graphemes
+     * were expanded.
+     * This may seem like an odd arangement, but this extra information is needed
+     * to determine the length of the haystack which was traversed, as it can
+     * differ from the length of the needle if there are expansions. */
 }
 /* Checks if needle exists at the offset, but ignores case.
  * Sometimes there is a difference in length of a string before and after foldcase,
@@ -681,6 +690,9 @@ MVMint64 MVM_string_equal_at_ignore_case(MVMThreadContext *tc, MVMString *haysta
     MVMString *needle_fc;
     MVMStringIndex h_graphs = MVM_string_graphs(tc, haystack);
     MVMStringIndex n_graphs = MVM_string_graphs(tc, needle);
+    MVMStringIndex n_fc_graphs;
+    /* h_expansion must be able to hold integers 3x larger than MVMStringIndex */
+    MVMint64 h_expansion;
 
     if (h_offset < 0) {
         h_offset += h_graphs;
@@ -696,8 +708,11 @@ MVMint64 MVM_string_equal_at_ignore_case(MVMThreadContext *tc, MVMString *haysta
     MVMROOT(tc, haystack, {
         needle_fc = MVM_string_fc(tc, needle);
     });
-
-    return string_equal_at_ignore_case_INTERNAL_loop(tc, haystack, needle_fc, h_offset, h_graphs, n_graphs);
+    n_fc_graphs = MVM_string_graphs(tc, needle_fc);
+    h_expansion = string_equal_at_ignore_case_INTERNAL_loop(tc, haystack, needle_fc, h_offset, h_graphs, n_fc_graphs);
+    if (h_expansion >= 0)
+        return h_graphs + h_expansion - h_offset >= n_fc_graphs  ? 1 : 0;
+    return 0;
 }
 MVMint64 MVM_string_index_ignore_case(MVMThreadContext *tc, MVMString *haystack, MVMString *needle, MVMint64 start) {
     /* Foldcase version of needle */
@@ -706,6 +721,8 @@ MVMint64 MVM_string_index_ignore_case(MVMThreadContext *tc, MVMString *haystack,
 
     size_t index           = (size_t)start;
     MVMStringIndex hgraphs, ngraphs;
+    /* h_expansion must be able to hold integers 3x larger than MVMStringIndex */
+    MVMint64 h_expansion;
     MVMint64 return_val = -1;
     MVM_string_check_arg(tc, haystack, "index search target");
     MVM_string_check_arg(tc, needle, "index search term");
@@ -730,12 +747,11 @@ MVMint64 MVM_string_index_ignore_case(MVMThreadContext *tc, MVMString *haystack,
         needle_fc = MVM_string_fc(tc, needle);
     });
     n_fc_graphs = MVM_string_graphs(tc, needle_fc);
-
     /* brute force for now. horrible, yes. halp. */
     while (index <= hgraphs) {
-        if (string_equal_at_ignore_case_INTERNAL_loop(tc, haystack, needle_fc, index, hgraphs, n_fc_graphs))
-            return (MVMint64)index;
-
+        h_expansion = string_equal_at_ignore_case_INTERNAL_loop(tc, haystack, needle_fc, index, hgraphs, n_fc_graphs);
+        if (h_expansion >= 0)
+            return hgraphs + h_expansion - index >= n_fc_graphs  ? (MVMint64)index : -1;
         index++;
     }
     return -1;
